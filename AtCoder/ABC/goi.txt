
◾︎ニューラルネットワークとは、脳の神経回路による計算をコンピュータで再現したものである。
ニューラルネットワークの学習モデルとして現在最も良く用いられるものの一つがバックプロパゲーションである。
バックプロパゲーションでは、入力から前向きにニューラルネットワークをたどりながら出力を求め、その結果と期待される出力の差が小さくなるように後ろ向きにニューラルネットワークをたどりながら各ニューロンの重みを更新する。

◾︎モンテカルロ法
モンテカルロ法とは、乱数を用いて問題の近似解を求める手法の一つである。
モンテカルロ法は多項式時間で終了することを保証するが、得られた解が必ずしも正しいとは限らない。
モンテカルロ法を用いた数値計算の例としては、円周率の計算が有名である。
これは、[0, 1]x[0, 1] の範囲の乱数を多数生成し、そのうち原点を中心とする円の内部に含まれるものの割合を計算することで π/4 の値を近似的に求めるというものである。

◾︎パイプラインはざーど
パイプラインハザードとは、命令同士の依存関係によりパイプライン化が無駄になる、もしくは不可能となる事を指す。例えば、ある命令が直前の命令の結果を利用する場合、直前の命令が完了するまでその命令は実行することができない。これをデータハザードと呼ぶ。また、分岐命令が存在するとき、その結果によって実行すべき命令が変わってしまうため、パイプラインを止めて分岐の結果が出るのを待つ必要がある。これを制御ハザード(または分岐ハザード)と言う。



■情報理論・暗号・パターン認識
・主成分分析
相関のある多数の変数から相関のない少数で全体のばらつきを最も表す主成分と呼ばれる変数を合成する多変量解析の一手法。データの次元を削減するために用いられる。
主成分を与える変換は、第一主成分の分散を最大化し、続く主成分はそれまでに決定した主成分と直交するという拘束条件のもとで分散を最大化するようにして選ばれる。
主成分の分散を最大化することは観測値の変化に対する説明能力を可能な限り主成分に持たせる目的で行われる。

・公開鍵基板（PKI）
公開鍵暗号方式や電子署名方式で用いる公開鍵とその持ち主の対応関係を保証するための仕組みである。
本当に相手のものであるかを認証局という第三者機関を用いることで保証する。
例えば、ある公開鍵基板利用者Aが別の利用者Bの公開鍵が本当にBのものであるかを確認する。
その場合にはBに対する公開鍵証明書を入手し、次に公開鍵証明書を発行した認証局Cに対する公開鍵と公開鍵証明書を入手する、同様に繰り返し、最後にトラストアンカーと呼ばれるPKIにおける最も信頼できると思われる認証局Zまでたどり着き、しかもそれまでに入手した公開鍵証明書が正当なものであれば、公開鍵BをBの公開鍵として受理する。

・ベイズの定理
確率および条件付き確率に関してP(A)>0の時、次が成り立つような条件付き確率に関する定理。
P(A)：事象Aが起きる前の事象Bの確率
P(B|A)事象Aが起きた後での事象Bの確率とする

事象Aに関するあるデータが得られとすると、それを反映し、P(B|A)の乗算によって事象Bの確率は事前確率から事後確率へと更新される。
応用例としては迷惑メールの発見や分類といった作業のコンピュータを用いた自動か等のふるいわけにも利用されている。

・ユーザ認証or個人識別の合わせて三種類とその方法


・隠れマルコフモデル
確率モデルの一つで、観測されない状態をもつマルコフ過程である。
マルコフ連鎖では状態が直接観測可能で状態の遷移確率がパラメータであるのに対して、隠れマルコフモデルにおいては状態は直接観測されず、モデルの状態による確率分布のみが出力（事象）として観測される。
隠れマルコフモデルは、音声認識、バイフォインフォマティクス、形態素解析など時系列のパターン認識に応用されている。

・ベクトル量子化
情報理論における量子化の手法の総称。
通常の量子化は標本化したアナログ信号の各サンプルに対して最も近い離散値のデジタル符号に置き換えることで行われるのにたいして、ベクトル量子化は複数のサンプルを取り込みそれをまとめて符号化する。
この複数データをベクトルとして扱うためにベクトル量子化と呼ばれる。
近年ではベクトルデータの次数を落とす方法として画像や音声の非可逆圧縮の作成に使われたりする。

・フィッシング
インターネットのユーザから経済的価値がある情報（ユーザ名、パスワード、クレジットカード情報）を奪うために行われる詐欺行為である。
悪意のある第三者が会員制ウェブサイトや有名企業を装い、本物のウェブサイトと偽った偽のウェブサイトへのURLリンクを貼ったメールを送りつけクレジットカードや銀行口座の情報を獲得を目的とする。
対策として各種個人情報を入力する際にはドメイン名を確認したり、URLが本物であるかを確認することがあげられる。

・標本化定理
アナログ信号をデジタル信号へと交換する際に、どの程度の間隔で標本化すれば良いかを定量的に示す定理。
原信号に含まれる最大周波数成分をfとすると、2fよりも高い周波数fsで標本化した信号は、低域通過フィルターで高域成分を除去することによって原信号を完全に復元できる。
標本化周波数が2f以下であった場合、原信号にはない偽の周波数fs-fがエイリアス信号として復元信号に現れてしまう。

・公開鍵暗号を用いたデジタル署名法
書面上の手書き署名のセキュリティを模倣するために用いられる技術。
①鍵ペアを生成する鍵生成アルゴリズム②利用者の秘密鍵を用いて署名を生成するアルゴリズム③利用者の公開鍵を用いて署名を検証するアルゴリズムの3つからなっている。
デジタル署名では電子メールや契約書などの認証機能を提供する。

・事後確率
条件付き確率の一種で、事前確率の対になる用語。
事象Aの確率(事前確率)をP(A)とし、条件Aの下で事象Bが成立する確率(事後確率・条件付き確率)をP(B|A)とする。
このとき、P(B|A)はP(A), P(B), P(A|B)を用いて次のように記述できる。
    P(B|A) = P(A|B) * P(B) / P(A)
ベイズの定理により事前確率に尤度関数の出力値をかけると事後確率が得られる。
（サイコロの例：2つのサイコロを振って「出た目の和が6である」というヒントを得た場合には、2の目が出た確率は2/5となる）

・尤度関数
統計学においてある前提条件に従って結果が出現する場合に、逆に観測結果から見て前提条件が〜であったと推定する最もらしさを表す数値を〜を変数とする関数として捉えたものである。B=bであるということが確定しているときにAが起きる確率をとする。このとき逆にAが観察されていることを元にしてこの条件付き確率を変数bの関数として尤度関数という。


■ネットワーク・セキュリティ
・SSL（secure socket layer）
インターネットなどのコンピュータネットワークにおいてセキュリティを要求される通信を行うためのプロトコルである。主な機能として、通信相手の認証、通信内容の暗号化、改竄の検出を提供する。SSLはIETFによって策定された。
SSLは多くの場合、コネクション型のトランスポート層プロトコル（通常はTCP）とアプリケーション層のあいだにおいて使われる。
SSLは特定のアプリケーション層プロトコルに依存しないため、HTTP以外にも多くのプロトコルにおいて採用され、クレジットカード情報や個人情報、その他の機密情報を通信する際の手段として活用されている。


・標的型攻撃メール
明確な意思と目的を持った人間が特定の組織内の情報を狙って行われるサイバー攻撃の一種。
その組織の構成員宛にコンピュータウィルスが添付された電子メールを送ることなどによって開始される。
攻撃者手法の例として、web等で公表されている情報を加工してメール本文や添付ファイルを作成したり、
組織内の業務連絡メールを加工して本文や添付ファイルを作成したり、日常会話的なメールを
数回繰り返してメール受信者の警戒心を和らげたりする、


・ネットワークセキュリティプロトコルの例（ひとつ。SSLとか？）
インターネットなどのコンピュータネットワークにおいてセキュリティを要求される通信を行うためのプロトコルである。主な機能として、通信相手の認証、通信内容の暗号化、改竄の検出を提供する。SSLはIETFによって策定された。
SSLは多くの場合、コネクション型のトランスポート層プロトコル（通常はTCP）とアプリケーション層のあいだにおいて使われる。
SSLは特定のアプリケーション層プロトコルに依存しないため、HTTP以外にも多くのプロトコルにおいて採用され、クレジットカード情報や個人情報、その他の機密情報を通信する際の手段として活用されている。


・クロスサイトスクリプティング
webアプリケーションの脆弱性を利用した攻撃。
攻撃者の作成したスクリプトを脆弱性のある標的サイトのドメイン権限において閲覧者のブラウザで実行させる攻撃一般を指す。
スクリプトが実行されることにより、不正プログラムの感染、ユーザーを騙す表示によるフィッシング詐欺、クッキー情報の取得によるセッションハイジャックなどにつながる。
ユーザーの対策として、ブラウザのアップデートや不審なURLを安易にクリックしないことが挙げられる。


・分散ハッシュテーブル
主にP2P環境において中央サーバーを必要としないデータ検索を行うシステムを構築する手法。
アイテムとノードのそれぞれにハッシュ値を割り当て、アイテムのハッシュ値に最も近いハッシュ値を持つノードにアイテムを格納する。
検索する際には欲しいアイテムのハッシュ値を計算し、近いハッシュ値を持つノードに順々に問い合わせることで検索を行う。
このようにすることで特的ピアに負荷が集中することなく大規模なコンテンツ探索を実現する。
実現手法としてChord、Can等がある。

・相互情報量
情報理論において2つの確率変数の相互依存の尺度を表す量である。最も典型的な相互情報量の物理単位はビットであり、2を底とする対数が使われることが多い。
XとYが独立な場合の同時分布と実際の同時分布の距離を示す量である。


■プログラミング言語・オートマトン
・高階関数
関数を引数にしたり、関数を戻り値とするような関数のことである。
高階関数は主に関数型言語やその背景理論であるラムダ計算において多用される。
例えばpythonにおける高階関数としてmap関数が挙げられる。
map(int,input().split())の記述をすると、標準入力で受け取られるオブジェクトの一つ一つに対して、整数型に変換される関数intが反映される。

・ラムダ計算
計算模型の一つで、計算の実行を関数の引数への評価と適用としてモデル化・抽象化した計算体系である。
ラムダ計算は一つの計算規則と一つの関数定義規則のみを持つ。
例えば、ある数に2を加える関数fを考える。通常であればf(x) =x+2のように書くが、ラムダ計算ではλx.x+2とかく。
LISPやHaskellなどの関数型プログラミング言語の理論的基盤としてその誕生に大きな役割を果たした。


・論理プログラミング
計算機のプログラムを数理論理学の概念を用いて表現するプログラミングパラダイムであり、数学的背景として証明論とモデル理論を持つ。論理型プログラミング言語では一階述語論理式のうちホーン節と呼ばれる論理式を扱うことができ、推論機能を持っていることを特徴とする。論理型プログラミング言語として代表的なものにPrologがある。

・Unicode
Unicodeとは、世界中で用いられるすべての文字を共通の方法で符号化して扱うための標準規格であり、MacOS、Windows、UNIXなどで使われている。
Unicodeでは、文字に非負整数値が割り振られており、Unicodeスカラ値を文章中に記す場合などは”U+”のあとに16進数ほうでその値を続けることで表す。
はじめは2バイトで全ての文字を表現することを目指していたが、現在では4バイトで定義されている。

・参照透過性　抽象的
計算機言語の概念の一種であり、あるプログラムの関数は同じ変数を引数として与えられれば同じ値を返すということである。

・WebシステムにおけるCGI（common gateway interface）
ウェブサーバー上でwebブラウザなどからの要求に対してプログラムを起動するための仕組み。プログラムファイルのおかれているURLにクライアントがアクセスすると、サーバー内部でそのプログラムが起動され、実行結果がクライアントに送信される。アクセス時にクライアント側からデータを送信することもでき、起動されたプログラムがデータを受け取って処理内容に反映させたりサーバー内部に保存したりすることができる。


・関数型プログラミング言語の特徴


・正規文法と正規言語


・文脈自由文法
形式言語の理論において全生成規則がV→wの形式を持つ形式文法である。
Vは非終端記号でwは終端文字と終端記号で構成される文字列である。
「文脈自由」という用語は前後関係に頼ることなく非終端記号のVをwに置換できるという意味であり、
文脈自由文法によって生成される形式言語を文脈自由文法という。





・有限オートマトン
有限個の状態と遷移と動作の組み合わせからなる数学的に抽象化された振る舞いのモデルである。
ある一連の状態をとった時にどのように論理が流れるかを調べることができる。
まずある時点で一つの「現在状態」を取り、何らかの条件により別の状態へと「遷移」する。
例えばカーラジオシステムでは、特定のラジオ局の放送を聞いている「状態」で次へのボタンを押すと、次のラジオ局へ遷移する。
一方で、CDプレイヤーシステムでは次へボタンは次のトラックへの移行を意味する。このように同じイベントに対してでも現在状態によって違う動作を引き起こす。
有限オートマトンは通信プロトコル、構文解析などで応用がある。

・プッシュダウンオートマトン
オートマトンの一種であり文脈自由言語を認識する抽象機械である。
通常のオートマトンと違い、①スタックを使い状態遷移を判断②動作の一部としてスタック操作ができる。



■アルゴリズム
・分割統治法
そのままでは解決できない大きな問題を小さな問題に分割し、その全てを解決することで最初の問題全体を解決するという問題解決の手法である。実現方法としては、ある関数を再帰的に呼び出すことでそれを構成する小さな問題として扱うやり方がある。
分割統治法の例としてマージソートが挙げられる。ある配列をその中央値で分割することを繰り返し、これ以上分割ができなくなった段階で要素を並び替えて分割したものと結合していく

・B木
木構造からなるデータ構造の一つ。
通常の二分木と違い、一つのノードから複数分岐している平衡木であり、階層の深さが同じになるようにノードの分割と併合を行う。
ブロック単位のランダムアクセスが可能な補助記憶装置上に木構造を実装するのに適している。
また、データベース管理システムの多くはB木による索引を実装している。

・ヒープソート のデータ構造
・分岐限定法

・NP困難（図をもって説明すると良いかも）
計算量理論において「NPに属する任意の問題と比べて少なくとも同等以上に難しい」問題である。
すなわち、非決定性チューリングマシンによって多項式時間で解ける問題と同等以上に難しい問題。
NP完全な問題との違いは、問題の種類が必ずしも判定問題に限らない点にある。
NP困難な問題の例として、巡回セールスマン問題・ナップサック問題などが挙げられる。

・NP完全問題
計算量理論において①クラスNPに属する決定問題であり②任意のクラスNPに属する問題から多項式時間還元可能なものである。
①を満たさない場合にはNP困難な問題とされる。多項式時間還元の推移性から、
クラスNPに属する問題である一つのNP完全問題から多項式時間還元可能なものも、NP完全である。
つまり、「クラスNPのうち最も難しい問題である」ことが言える。
NP完全問題の例として、部分和問題・ハミルトン経路問題などがある。

・巡回セールスマン問題
都市の集合と移動コストが与えられた時、全ての都市をちょうど一度ずつ巡り
出発地に戻る経路の総移動コストが最小のものを求める組み合わせ最適化問題である。
この問題は計算複雑性理論においてNP困難と呼ばれる問題のクラスに属し、
多項式時間のアルゴリズムが見つかりそうにない決定量的に困難な問題である。
実際に全ての経路を計算することで最適解を得る手法は時間計算量はO（n!）であり、都市が20以上になると現実的でない。
応用事例としてより複雑な定義で配送計画などに適用される。


・最短経路問題
重み付きグラフの与えられた2つのノード間を結ぶ経路の中で重みが最小の経路を求める最適化問題である。
2頂点対最短経路問題、単一始点最短経路問題、全点対最短経路問題と種類分けされ、それぞれを解くアルゴリズムとして
ベルマンフォードアルゴリズム、ダイクストラのアルゴリズム、ワーシャルフロイドのアルゴリズムがある。
最短経路問題の応用例としては鉄道案内アプリなどがある。
駅をノード、駅と駅の所要時間を重みとしたエッジとして鉄道経路をグラフ化して最短経路を求めている



■アーキテクチャ・OS
・OSやプログラムにおけるプロセスとスレッドの違い
プロセスは、実行中のプログラムを抽象化したものであり、リソースの割り当てと保護の単位である。スレッドは、プロセスの中での実行単位である。例えば、「通信処理」、「画面表示」、「キー入力受付」などの一つのプログラム内の複数処理内の単位である。
一つのプロセス内のメモリは各スレッドで共有ができるが、プロセス内間では共有ができない。

・チューリングマシン
計算模型の一つで、計算機を数学的に議論するための単純化・理想化されたモデルである。イギリスの数学者アラン・チューリングの論文「計算可能数についてー決定問題への応用」で発表された。
表面に記号を読み書きできる無限長のテープ、読み書きヘッド、有限オートマトンから構成され、テープの場所から読みだした記号の組み合わせに応じて、テープへの新しい記号の書き込みやヘッドの移動を行う。

・スヌープキャッシュ
分散共有メモリとマルチプロセッサを備えたシステムでキャッシュコヒーレンシを実現するために用いられる技術である。
システムにメインメモリが一つしかない場合でもキャッシュメモリがプロセッサごとに一つずつ存在し、何らかの対策を施さない限り同じメモリが複数のキャッシュにロードされ異なる値を持ってしまう可能性がある。これを防ぐため、各キャッシュコントローラはバスを監視し、バス上に流れるブロードキャストの通知を受け、必要に応じて特定のキャッシュラインを無効にする。

・グリッドコンピューティング
インターネットなどの高域のネットワーク状にあるCPUなどの計算資源を結びつけ、一つの複合したコンピュータシステムとしてサービスを提供する仕組みである。一箇所の計算センターやひと組のスーパーコンピュータでは足りないほどの大規模な計算処理や大量のデータを保存・利用するための手段として開発されている。グリッドの計算資源管理・監視・データ移動などを行うためのミドルウェアとしてGlobusなどがある。

・アウトオブオーダ処理
高性能プロセッサにおいてクロックあたりの実行命令数を増やし性能をあげるための手法の一つ。機械語プログラム中の命令の並び順によらず、データなどの依存関係から見て処理可能な命令について逐次開始・実行・完了させるものである。例えば、二つの命令のうちの先の一つがメインメモリにアクセスする場合、メモリアクセスに時間がかかるためこの分無駄な時間が生まれるが、アウトオブオーダ処理の場合はメモリアクセスの間に他の処理を終わらせることによって処理時間を短縮する。


・RISC型とCISC型プロセッサ
CISC：複雑な命令を持っているため多種多様な演算が実行可能（パソコン・MF）
回路構成：複雑、コードサイズ：小さい、命令数：多い、動作周波数：低い
RISC：単純で最小限の命令を持っており構造がシンプルな分だけ非常に高速に処理できる（マイコン・携帯）

・パイプラインハザード
命令同士の依存関係などにより、パイプライン化が無駄になる、もしくは不可能となることを指す。
例えば、ある命令が直前の命令結果を利用する場合、直前命令が完了するまでその命令は実行できない。これをデータハザードという。
また、分岐命令が存在するとき、パイプラインを止めて分岐の結果が出るのを待つ必要がある。これを制御ハザードという。

・レジスタリネーミング
コンピュータのプログラム内でレジスタを再利用しているために不必要な順序性が生じているのを、
より多くの実在するレジスタを利用して依存をなくす技術である。
例えば下記順番で命令を実行する際には違う命令にもかかわらず同じレジスタを利用するために後者の命令が止まってしまう。
①メモリ1からレジスタ1へ→レジスタ1に数値2を加算→レジスタ1の内容をメモリ1へ
②メモリ2からレジスタ1へ→レジスタ1に数値3を加算→レジスタ1の内容をメモリ2へ
これをレジスタリネーミングを使い、かつアウトオブーダ実行を行うことで命令順序に阻害されず高速に処理ができる。
①メモリ1からレジスタ1へ→レジスタ1に数値2を加算→レジスタ1の内容をメモリ1へ
②メモリ2からレジスタ2へ→レジスタ2に数値3を加算→レジスタ2の内容をメモリ2へ

・同期回路と非同期回路
デジタル論理回路の設計技術の種類である。
同期式回路：クロックに同期して回路が動作する。
　メリット：動作が安定しやすい
　デメリット：クロックを待つ分反応が遅れる
非同期式回路：入力が変化すると即座に回路が動作する
　メリット：反応が早い
　デメリット：タイミングを上手くとらないと動作が不安定になる



・スーパースカラ
プロセッサのアーキテクチャにおける用語で、複数命令を同時にフェッチし並列に動作させ、プログラムの持つ命令レベルの並列性を利用して、性能向上を図るアーキテクチャである。ただし、複数命令の間に前の命令の結果を利用するといった依存関係がある場合には同時に実行することができない。

・半加算器
二進数の同じ桁同士の加算を行う演算装置である。
その桁自身の演算結果と桁上がり値を出力する。論理阻止を用いて作ると下記図のようになる。真理値表は以下の通りとなる。

・全加算器
二進数の最下位以外の桁同士の演算をして下位からの桁上げ入力を含めて出力する演算装置である。下位からの桁上げ出力を上位の桁上げ入力に接続することにより任意の桁数の二進数の加算が可能となる。一つの半加算器は2個の半加算器と1個のORから構成される。論理阻止を用いると下記のように表され、真理値表は下記のようになる。

・キャリールックあーヘッド


■人工知能
・決定木の学習法
決定木の学習では訓練データを何らかの指標に基づいて幾つかの集合に分割し、分割したそれぞれのデータを部分木とする木を作成する。それぞれの部分木に対しても再帰的に分割を行い、最終的な木構造を得る。
良い決定木を得るためには訓練データの分割の指標の定め方が問題となる。この指標の定め方には様々な種類があり、例えばID3やC4.5と呼ばれる手法では情報量(エントロピー)を基に指標を定める。

・自然言語の形態素
・意味ネットワークによる知識表現法とその特徴
・深層学習
・不変特徴量
・バックプロパゲーション
・サポートベクタマシン
・ベイジアンネットワーク
・勾配降下法
・

◾︎データベースの正規化
関係データベースの正規化とは、関連するデータをグループ化したり、同一データを重複して持つことが無いようにテーブルを分割・整理したりすることにより、データベースを正規形と呼ばれる形式に統一することを言う。
正規化を行うことで、データの更新による矛盾の発生を防ぐことができ、データの一貫性が保たれる。
正規化されていないデータベースはしばしば非効率であり、データベースの活用の妨げとなる。

正規化のうち特によく知られているのが第1〜第5正規形とボイス・コッド正規形であり、特に第3正規形までのものは実務でもよく用いられている。

■画像・ロボット
・webで標準的に使用されるGIFとJPEGの画像符号化方法
・GIF
可逆圧縮形式の画像化方法。色を光の三原色の強さで表現し、
全ての入力可能な文字で辞書を初期化する
現在の入力文字列と最も長く一致する文字列wを辞書から探す
出力にwの辞書のインデックスを総収し、wを入力文字列から削除する
入力で後ろに続く1文字sを付け足したW+sを辞書に追加する


・ハフ変換
・擬似逆行列
・PID制御
・運動学と逆運動学
・力制御の具体的な実現方法


■どこだかわからない
・カルマンフィルタ
離散的な誤差のある観測から、時々刻々と時間変化する量（物体の位置や速度）を推定するために用いられる。レーダーやコンピュータビジョンなど工学分野で用いられる。

カルマンフィルタの状態方程式は下記のようにして表現される。

ここで、
 は、システムの時間遷移に関する線形モデル
 は制御入力。
 は時間遷移に関する雑音モデルの行列で、 はその雑音で、共分散行列  かつ零平均の多変数正規分布に従う。
例えばカーナビでは機器内蔵の加速度計や人工衛星からの誤差のある情報を統合して自動車の位置を推定するのに応用されている。


・ウェーブレット変換
基底関数としてウェーブレット関数を用いた周波数解析の手法のひとつ。
フーリエ変換によって周波数特性を求める際に失われる時間領域の情報を残すことが可能。
基底関数の拡大拡小を行うことでフーリエ変換では解析の難しい広い周波数領域の解析が可能である。
」計算量はNをデータのサイズとするとO(N）の計算量でできる｡信号解析や量子力学の分野に応用されている。

・フーリエ変換
実変数の複素または実数値関数を周波数の関数に移す変換である。
複雑な周期函数は、単純な波動の数学的な表現である正弦関数や余弦関数の和として表される。
正弦や余弦の性質により、この和の積分を行うことで各波の量やフーリエ係数を計算することができる。
よく用いられる公式の一つとして、下記のようなものがある。


フーリエ級数展開：同じ波形が周期的に流れている
フーリエ変換：波形が周期的に流れていない

・tf-idf
文書中に含まれる単語の重要度を評価するための手法の一つであり、主に情報検索やトピック分析などの分野で用いられている。
tf単語の頻度・idf逆文書頻度の二つに基づいて計算される。


は文書{における単語の出現回数は文書におけるすべての単語の出現回数の和、は総文書数、は単語}を含む文書数である。


・ケプストラム
音のスペクトルを信号とみなしてフーリエ変換した結果。

（スペクトル：複雑な情報や信号をその成分に分解し、成分ごとの大小にしたがって配列したもの）


・自己相関関数とパワースペクトル
https://ja.wikipedia.org/wiki/%E8%87%AA%E5%B7%B1%E7%9B%B8%E9%96%A2


・リアルタイム性


・ひずみゲージ
ひずみゲージ（英語: strain gauge）は、物体のひずみを測定するための力学的センサである。ひずみ測定を利用して間接的に、加速度計測や荷重計にも用いられる。ひずみゲージの一種である金属ひずみゲージは薄い絶縁体上にジグザグ形状にレイアウトされた金属の抵抗体（金属箔）が取り付けられた構造をしており、抵抗体の変形に伴う電気抵抗の変化を測定し、これを被測定物のひずみ量に換算する

・実行時コンパイラ
実行時コンパイラとは、ソフトウェアの実行時にコードのコンパイルを行い実行速度の向上を図るコンパイラのこと。
通常のコンパイラはソースコード（あるいは中間コード）から対象CPUの機械語への変換を実行前に事前に行い、これをJITと対比して事前コンパイラ (Ahead-Of-Timeコンパイラ、AOTコンパイラ)と呼ぶ。
https://ja.wikipedia.org/wiki/%E5%AE%9F%E8%A1%8C%E6%99%82%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%A9

・PWM制御

・オプティカルフロー
オプティカルフロー（英: optical flow）とは、視覚表現（通常、時間的に連続するデジタル画像）の中で物体の動きをベクトルで表したものである。
オプティカルフローは、パターン認識、コンピュータビジョンあるいは他の画像処理技術において利用されている。その抽出にはブロックマッチング法、勾配法などが用いられる。
https://ja.wikipedia.org/wiki/%E3%82%AA%E3%83%97%E3%83%86%E3%82%A3%E3%82%AB%E3%83%AB%E3%83%95%E3%83%AD%E3%83%BC


・クロージャ

・自己相関
自己相関（じこそうかん、英語: autocorrelation）とは、信号処理において時間領域信号等の関数または数列を解析するためにしばしば用いられる数学的道具である。自己相関は、信号に含まれる繰り返しパターンを探すのに有用であり、例えば、ノイズに埋もれた周期的信号の存在を判定したり、 信号中の失われた基本周波数を倍音周波数による示唆に基づき同定するために用いられる。
